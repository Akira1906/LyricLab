/ 在 rich_text.slim 頂部添加
javascript:
  document.addEventListener('DOMContentLoaded', function() {
    // 定義語言等級與詞彙等級的對應關係
    const LEVEL_MAPPINGS = {
      'beginner': ['beginner', 'novice1', 'novice2'],
      'intermediate': ['novice2', 'level1', 'level2'],
      'advanced': ['level2', 'level3', 'level4'],
      'expert': ['level3', 'level4', 'level5'],
      'master': ['level4', 'level5']
    };

    // 監聽全局的語言等級變化事件
    window.addEventListener('languageLevelChanged', function(e) {
      const selectedLevel = e.detail.level;
      const levelsToBeCheked = LEVEL_MAPPINGS[selectedLevel] || [];
      
      // 取消所有勾選
      document.querySelectorAll('.level-checkbox input').forEach(checkbox => {
        checkbox.checked = false;
      });
      
      // 根據選擇的語言等級勾選對應的詞彙等級
      levelsToBeCheked.forEach(level => {
        const checkbox = document.getElementById(`${level}Check`);
        if (checkbox) {
          checkbox.checked = true;
        }
      });
      
      // 更新單詞顯示
      updateActiveWords();
    });
  });


.d-flex.justify-content-between.align-items-center.mb-3
  div
    h3.mb-0 Lyrics
    span click to see more vocabulary info.

    - if vocabulary.respond_to?(:song) && vocabulary.song&.respond_to?(:origin_id)
      - spotify_url = "https://open.spotify.com/track/#{vocabulary.song.origin_id}"
      a.btn.d-inline-flex.align-items-center.spotify-button href=spotify_url target="_blank"
        i.fab.fa-spotify
        span Listen on Spotify

  .level-button-container
    button#levelButton.btn.btn-outline-success.ms-auto onclick="toggleLevelDropdown(event)" Select vocabulary level
    
    #levelDropdown.level-dropdown-content
      .level-checkbox
        input type="checkbox" id="beginnerCheck" checked=vocabulary.level_checked?('beginner')
        label.ms-2 for="beginnerCheck" Beginner
      .level-checkbox
        input type="checkbox" id="novice1Check" checked=vocabulary.level_checked?('novice1')
        label.ms-2 for="novice1Check" Novice 1
      .level-checkbox
        input type="checkbox" id="novice2Check" checked=vocabulary.level_checked?('novice2')
        label.ms-2 for="novice2Check" Novice 2
      .level-checkbox
        input type="checkbox" id="level1Check" checked=vocabulary.level_checked?('level1')
        label.ms-2 for="level1Check" Level 1
      .level-checkbox
        input type="checkbox" id="level2Check" checked=vocabulary.level_checked?('level2')
        label.ms-2 for="level2Check" Level 2
      .level-checkbox
        input type="checkbox" id="level3Check" checked=vocabulary.level_checked?('level3')
        label.ms-2 for="level3Check" Level 3
      .level-checkbox
        input type="checkbox" id="level4Check" checked=vocabulary.level_checked?('level4')
        label.ms-2 for="level4Check" Level 4
      .level-checkbox
        input type="checkbox" id="level5Check" checked=vocabulary.level_checked?('level5')
        label.ms-2 for="level5Check" Level 5

.lyrics.p-4 style="font-size: 1.2rem;"
  - if vocabulary.respond_to?(:raw_text) && vocabulary.raw_text && vocabulary.marked_text
    - lines = vocabulary.marked_text.split("\n")
    - lines.each do |line|
      .line.mb-3
        - left = 0
        - in_marked_word = 0
        - for right in 0..line.length
          - if line[right] == '\\' && line[right + 1] == '@' && in_marked_word == 0
            - if left < right
              - word = line[left...right].gsub(/[\\@$]/, '')
              span = word
              span.word-space<> = " "
            - left = right + 2
          - if line[right] == '\\' && line[right + 1] == '$' && in_marked_word == 1
            - word = line[left...right].gsub(/[\\@$]/, '')
            - left = right + 2
            - unique_word = vocabulary.unique_words.find { |w| w.characters == word }
            - if unique_word
              span[
                class="vocabulary-word cursor-pointer"
                onclick="handleWordClick(this)"
                data-word=unique_word.characters
                data-translation=unique_word.translation
                data-pinyin=unique_word.pinyin
                data-definition=unique_word.definition
                data-example=unique_word.example_sentence
                data-level=unique_word.language_level.gsub('-class', '')
                data-original-level=unique_word.language_level
              ] = "#{word} "
              span.word-space<> = " "
            - else 
              span = word
              span.word-space<> = " "
          - if line[right] == '\\' and line[right + 1] == '@'
            - in_marked_word = in_marked_word + 1
          - if line[right] == '\\' and line[right + 1] == '$'
            - in_marked_word = in_marked_word - 1
        - word = line[left...line.length].gsub(/[\\@$]/, '')
        span = word
        span.word-space<> = " "

javascript:
  function toggleLevelDropdown(event) {
    if (!event) event = window.event;
    event.stopPropagation();  
    const dropdown = document.getElementById("levelDropdown");
    dropdown.classList.toggle("show");
  }

  document.getElementById('levelDropdown').addEventListener('click', function(event) {
    event.stopPropagation();
  });

  document.addEventListener('click', function(event) {
    const dropdowns = document.getElementsByClassName("level-dropdown-content");
    for (let dropdown of dropdowns) {
      if (dropdown.classList.contains('show')) {
        dropdown.classList.remove('show');
      }
    }
  });

  document.addEventListener('DOMContentLoaded', function() {
    const checkboxes = document.querySelectorAll('.level-checkbox input');
    updateActiveWords();
    
    for (let checkbox of checkboxes) {
      checkbox.addEventListener('change', function() {
        const level = this.id.replace('Check', '');
        updateActiveWords();
        
        const cards = document.querySelectorAll('.word-card');
        for (let card of cards) {
          const levelSpan = card.querySelector(`span[class*="${level}-class"]`);
          if (levelSpan && !this.checked) {
            card.remove();
          }
        }
      });
    }
  });

  function updateActiveWords() {
    const allWords = document.querySelectorAll('.vocabulary-word');
    
    allWords.forEach(word => {
      word.classList.remove('active-level');
      word.classList.add('word-hidden');
      // 移除所有等級相關的 class
      word.className = word.className.split(' ').filter(cls => 
        !cls.includes('-class') && cls !== 'active-level'
      ).join(' ') + ' vocabulary-word word-hidden';
    });
    
    const checkedLevels = Array.from(document.querySelectorAll('.level-checkbox input:checked'))
      .map(checkbox => checkbox.id.replace('Check', ''));
    
    checkedLevels.forEach(level => {
      const levelWords = document.querySelectorAll(`.vocabulary-word[data-level="${level}"]`);
      levelWords.forEach(word => {
        word.classList.add('active-level');
        word.classList.remove('word-hidden');
        word.classList.add(`${level}-class`);
      });
    });
  }

  function handleWordClick(element) {
    if (element.classList.contains('word-hidden') || !element.classList.contains('active-level')) {
      return;
    }

    const level = element.dataset.level;
    const checkbox = document.getElementById(`${level}Check`);
    if (!checkbox || !checkbox.checked) {
      return;
    }

    const wordData = {
      word: element.dataset.word,
      translation: element.dataset.translation,
      pinyin: element.dataset.pinyin,
      definition: element.dataset.definition,
      example: element.dataset.example,
      level: element.dataset.level,
      className: element.className
    };
    
    const existingCard = document.querySelector(`.word-card[data-word="${wordData.word}"]`);
    if (existingCard) return;
    
    const card = document.createElement('div');
    card.className = 'card word-card mb-3';
    card.setAttribute('data-word', wordData.word);
    
    card.innerHTML = `
    <div class="card-body">
      <div class="d-flex justify-content-between align-items-start">
        <div style="flex: 1;">
          <h5 class="card-title mb-3">
            <span class="${wordData.level}-class" style="font-size: 1.5rem;">
              ${wordData.word}
            </span>
          </h5>
          <div class="vocabulary-details" style="font-size: 0.9rem;">
            <div class="mb-2 d-flex">
              <strong class="text-muted" style="min-width: 100px;">Pinyin:</strong>
              <span style="flex: 1;">${wordData.pinyin}</span>
            </div>
            <div class="mb-2 d-flex">
              <strong class="text-muted" style="min-width: 100px;">Translation:</strong>
              <span style="flex: 1;">${wordData.translation}</span>
            </div>
            <div class="mb-2 d-flex">
              <strong class="text-muted" style="min-width: 100px;">Definition:</strong>
              <span style="flex: 1;">${wordData.definition || wordData.translation}</span>
            </div>
            <div class="mb-2 d-flex flex-column">
              <strong class="text-muted" style="min-width: 200px;">Example_sentence:</strong>
              <span style="flex: 1;">${wordData.example}</span>
            </div>
            <div class="d-flex">
              <strong class="text-muted" style="min-width: 100px;">Level:</strong>
              <span style="flex: 1;">${getLevelName(wordData.level)}</span>
            </div>
          </div>
        </div>
        <button class="btn text-dark" style="padding: 0 10px; font-size: 1.5rem; line-height: 1;" onclick="removeWord(this)">×</button>
      </div>
    </div>
    `;
    
    const vocabularyDetails = document.getElementById('vocabulary-details');
    vocabularyDetails.insertBefore(card, vocabularyDetails.firstChild);
  }

  function removeWord(button) {
    button.closest('.word-card').remove();
  }

  function getLevelName(level) {
    const levelMap = {
      'beginner': 'Beginner',
      'novice1': 'Novice1',
      'novice2': 'Novice2',
      'level1': 'Level1',
      'level2': 'Level2',
      'level3': 'Level3',
      'level4': 'Level4',
      'level5': 'Level5'
    };
    return levelMap[level] || level;
  }