.d-flex.justify-content-between.align-items-center.mb-3
  div
    h3.mb-0 Lyrics
    span click to see more vocabulary info.

    - if vocabulary.respond_to?(:song) && vocabulary.song&.respond_to?(:origin_id)
      - spotify_url = "https://open.spotify.com/track/#{vocabulary.song.origin_id}"
      a.btn.d-inline-flex.align-items-center href=spotify_url target="_blank" style="background-color: #1DB954; color: white; border-radius: 500px; padding: 7px 15px; font-size: 14px; text-decoration: none; transition: all 0.2s ease;"
        i.fab.fa-spotify style="font-size: 16px; margin-right: 6px;"
        span Listen on Spotify

  .level-button-container
    button#levelButton.btn.btn-outline-success.ms-auto onclick="toggleLevelDropdown(event)" Select vocabulary level
    / TODO:default checkbox should filter by language skill
    #levelDropdown.level-dropdown-content
      .level-checkbox
        input type="checkbox" id="beginnerCheck" checked=true
        label.ms-2 for="beginnerCheck" Beginner
      .level-checkbox
        input type="checkbox" id="novice1Check" checked=true
        label.ms-2 for="novice1Check" Novice 1
      .level-checkbox
        input type="checkbox" id="novice2Check" checked=true
        label.ms-2 for="novice2Check" Novice 2
      .level-checkbox
        input type="checkbox" id="level1Check" checked=true
        label.ms-2 for="level1Check" Level 1
      .level-checkbox
        input type="checkbox" id="level2Check" checked=true
        label.ms-2 for="level2Check" Level 2
      .level-checkbox
        input type="checkbox" id="level3Check" checked=true
        label.ms-2 for="level3Check" Level 3
      .level-checkbox
        input type="checkbox" id="level4Check" checked=true
        label.ms-2 for="level4Check" Level 4
      .level-checkbox
        input type="checkbox" id="level5Check" checked=true
        label.ms-2 for="level5Check" Level 5

.lyrics.p-4 style="font-size: 1.2rem;"
  - if vocabulary.respond_to?(:raw_text) && vocabulary.raw_text && vocabulary.marked_text
    - lines = vocabulary.marked_text.split("\n")
    - puts "Vocabulary Words:#{vocabulary.unique_words.map(&:characters)}"
    - lines.each do |line|
      .line.mb-3 style="letter-spacing: -1px; line-height: 1.1;"
        - puts "splitted lines#{line.split}"
        - left = 0
        - in_marked_word = 0
        - for right in 0..line.length
          - print(line[right])
          - if line[right] == '\\' && line[right + 1] == '@' && in_marked_word == 0
            - if left < right
              - word = line[left...right].gsub(/[\\@$]/, '')
              span = word
              span.word-space<> = " "
            - left = right + 2
          - if line[right] == '\\' && line[right + 1] == '$' && in_marked_word == 1
            - puts "pointer area: #{line[left...right]}"
            - word = line[left...right].gsub(/[\\@$]/, '')
            - left = right + 2
            - puts "in_marked_word: #{in_marked_word}"
            - puts "word: #{word}"
            - unique_word = vocabulary.unique_words.find { |w| w.characters == word }
            - if unique_word
              - puts "found unique_word: #{unique_word.characters}"
              span[
                class="#{unique_word.language_level} cursor-pointer vocabulary-word"
                style="cursor: pointer;"
                onclick="handleWordClick(this)"
                data-word=unique_word.characters
                data-translation=unique_word.translation
                data-pinyin=unique_word.pinyin
                data-definition=unique_word.definition
                data-example=unique_word.example_sentence
                data-level=unique_word.language_level.gsub('-class', '')
              ] = "#{word} "
              span.word-space<> = " "
            - else 
              span = word
              span.word-space<> = " "
          - if line[right] == '\\' and line[right + 1] == '@'
            - in_marked_word = in_marked_word + 1
          - if line[right] == '\\' and line[right + 1] == '$'
            - in_marked_word = in_marked_word - 1
        - word = line[left...line.length].gsub(/[\\@$]/, '')
        span = word
        span.word-space<> = " "
javascript:
  function toggleLevelDropdown(event) {
    if (!event) event = window.event;
    event.stopPropagation();  
    const dropdown = document.getElementById("levelDropdown");
    dropdown.classList.toggle("show");
  }


  document.getElementById('levelDropdown').addEventListener('click', function(event) {
    event.stopPropagation();
  });

  document.addEventListener('click', function(event) {
    const dropdowns = document.getElementsByClassName("level-dropdown-content");
    for (let dropdown of dropdowns) {
      if (dropdown.classList.contains('show')) {
        dropdown.classList.remove('show');
      }
    }
  });

  document.addEventListener('DOMContentLoaded', function() {
    const checkboxes = document.querySelectorAll('.level-checkbox input');
    for (let checkbox of checkboxes) {
      checkbox.addEventListener('change', function() {
        const level = this.id.replace('Check', '');
        const words = document.querySelectorAll('.vocabulary-word[data-level="' + level + '"]');
        for (let word of words) {
          if (this.checked) {
            word.classList.remove('word-hidden');
          } else {
            word.classList.add('word-hidden');
          }
        }

        const cards = document.querySelectorAll('.word-card');
        for (let card of cards) {
          const levelSpan = card.querySelector('span[class*="' + level + '-class"]');
          if (levelSpan && !this.checked) {
            card.remove();
          }
        }
      });
    }
  });

  function handleWordClick(element) {
    if (element.classList.contains('word-hidden')) return;

    const level = element.dataset.level;
    const checkbox = document.getElementById(`${level}Check`);
    if (!checkbox || !checkbox.checked || element.classList.contains('word-hidden')) {
      return;
    } 

    const wordData = {
      word: element.dataset.word,
      translation: element.dataset.translation,
      pinyin: element.dataset.pinyin,
      definition: element.dataset.definition,
      example: element.dataset.example,
      level: element.dataset.level,
      className: element.className
    };
    
    const existingCard = document.querySelector(`.word-card[data-word="${wordData.word}"]`);
    if (existingCard) return;
    
    const card = document.createElement('div');
    card.className = 'card word-card mb-3';
    card.setAttribute('data-word', wordData.word);
    
    card.innerHTML = `
    <div class="card-body">
      <div class="d-flex justify-content-between align-items-start">
        <div style="flex: 1;">
          <h5 class="card-title mb-3">
            <span class="${wordData.level}-class" style="font-size: 1.5rem;">
              ${wordData.word}
            </span>
          </h5>
          <div class="vocabulary-details" style="font-size: 0.9rem;">
            <div class="mb-2 d-flex">
              <strong class="text-muted" style="min-width: 100px;">Pinyin:</strong>
              <span style="flex: 1;">${wordData.pinyin}</span>
            </div>
            <div class="mb-2 d-flex">
              <strong class="text-muted" style="min-width: 100px;">Translation:</strong>
              <span style="flex: 1;">${wordData.translation}</span>
            </div>
            <div class="mb-2 d-flex">
              <strong class="text-muted" style="min-width: 100px;">Definition:</strong>
              <span style="flex: 1;">${wordData.definition || wordData.translation}</span>
            </div>
            <div class="mb-2 d-flex flex-column">
              <strong class="text-muted" style="min-width: 200px;">Example_sentence:</strong>
              <span style="flex: 1;">${wordData.example}</span>
            </div>
            <div class="d-flex">
              <strong class="text-muted" style="min-width: 100px;">Level:</strong>
              <span style="flex: 1;">${getLevelName(wordData.level)}</span>
            </div>
          </div>
        </div>
        <button class="btn text-dark" style="padding: 0 10px; font-size: 1.5rem; line-height: 1;" onclick="removeWord(this)">Ã—</button>
      </div>
    </div>
  `;
    
    const vocabularyDetails = document.getElementById('vocabulary-details');
    vocabularyDetails.insertBefore(card, vocabularyDetails.firstChild);
  }
 
  function removeWord(button) {
    button.closest('.word-card').remove();
  }
  
  function getLevelName(level) {
    const levelMap = {
      'beginner': 'Beginner',
      'novice1': 'Novice1',
      'novice2': 'Novice2',
      'level1': 'Level1',
      'level2': 'Level2',
      'level3': 'Level3',
      'level4': 'Level4',
      'level5': 'Level5'
    };
    return levelMap[level] || level;
  }