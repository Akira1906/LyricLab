# frozen_string_literal: true

module LyricLab
  # module ChatGPT
  # TODO put this in the module and in the infrastructure folder

    # line credit calculation methods
    class GptWordProcessorStub
      # hi carrie, you can start to implement the GPT library here

      def initialize(@openai)
        # do something
        @openai = openai
      end

      def extract_words(text)
        # should return a list of unique words extracted by ChatGPT
        extract_message =[
        { role: 'system', content: 'You are a helpful assistant that extracts unique traditional chinese words from a given text.' },
        { role: 'user', content: "Extract unique traditional chinese words from the following text:
        reply in this format (one word per line):
        你好
        風
        雲
        天空 
        
        #{text}" }
        ]
        
        response = @openai.chat(extract_message)
        response.split("\n")
      end

      def create_word_entity(word_data)
        Entity::Word.new(
          id: nil,
          characters: word_data[:characters],
          pinyin: word_data[:pinyin] || 'unknown',
          translation: word_data[:translation] || 'unknown',
          example_sentence: word_data[:example_sentence] || 'No example provided'
          #example_sentence_mandarin: word_data[:example_sentence_mandarin] || 'No example provided',
          #example_sentence_pinyin: word_data[:example_sentence_pinyin] || 'No pinyin provided',
          #example_sentence_english: word_data[:example_sentence_english] || 'No translation provided'
        )
      end

      def get_words_metadata(input_words)
        # should return the metadata of the word generated by ChatGPT
        # in the format
        # {
        #     characters: word,
        #     pinyin: 'pinyin',
        #     translation: 'translation',
        #     word_type: 'word_type',
        #     example_sentence: 'example_sentence'
        #   }
            message = [
          { role: 'system', content: 'You are a professional Mandarin language teacher. Please analyze the vocabulary in these words.' },
          { role: 'user', content: "Please identify these words and respond in this format:
            Word:[Traditional chinese characters]
            translate:[English translation]
            Pinyin:[pinyin with tone marks]
            Definition:[detailed definition in Traditional chinese]
            Example:[example sentence in Traditional chinese]
            Example Pinyin:[pinyin for the example sentence]
            Example English: [English translation of the example sentence]

            Focus on words that would be valuable for language learners. Keep example sentences natural and practical.

            Words: #{input_words}" }
        ]

        begin
          response = @openai.chat_response(message)

          # Convert response to array of words
          words = []
          current_word = {}

          response.split("\n").each do |line|
            line = line.strip
            if line.start_with?("Word:")
              # before analyze new word, we should add previous word to words array
              if current_word[:characters]
                words << current_word
              end
              # Start a new word
              current_word = { characters: line.split(":")[1]&.strip }
            elsif line.start_with?("English:")
              current_word[:english] = line.split(":")[1]&.strip
            elsif line.start_with?("Pinyin:")
              current_word[:pinyin] = line.split(":")[1]&.strip
            elsif line.start_with?("Definition:")
              current_word[:translation] = combine_definitions(
                current_word[:english],
                line.split(":")[1]&.strip
              )
            elsif line.start_with?("Example Mandarin:")
              current_word[:example_sentence] = line.split(":")[1]&.strip
            elsif line.start_with?("Example Pinyin:")
              current_word[:example_sentence_pinyin] = line.split(":")[1]&.strip
            elsif line.start_with?("Example English:")
              current_word[:example_sentence_english] = line.split(":")[1]&.strip
            end
          end

          # Add the last word
          if current_word[:characters]
            words << current_word
          end

        return words
      end
      def combine_definitions(english, chinese)
        parts = []
        parts << english if english
        parts << chinese if chinese
        parts.join(" | ")
      end
    end
  # end
end
